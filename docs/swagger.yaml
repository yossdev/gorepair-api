openapi: 3.0.0
info:
  version: 1.0.0
  title: GoRepair Rest API
  description: GoRepair Rest API

paths:
  # USER ROUTES
  /user:
    post:
      tags:
        - user
      summary: Operation for user login
      responses:
        "200":
          description: OK
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "401":
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
  /user/{username}/logout:
    get:
      tags:
        - user
      summary: Operation for getting user logout
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
        "401":
          description: Unauthorized
  /user/register:
    post:
      tags:
        - user
      summary: Operation for user register
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - name
                - email
                - password
                - phone
              properties:
                username:
                  type: string
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phone:
                  type: string
        required: true
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user details by username
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "401":
          description: Unauthorized
        "404":
          description: Not found
  /user/{username}/account:
    put:
      tags:
        - user
      summary: Operation for update user account
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "400":
          description: Bad Request
        "500":
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - name
                - gender
                - dob
                - phone
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
                gender:
                  type: string
                dob:
                  type: string
                phone:
                  type: string
        required: true
  /user/{username}/address/update:
    put:
      tags:
        - user
      summary: Operation for update user address
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "500":
          description: Internal Serve Error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - country
                - province
                - city
                - street
                - building_number
                - postal_code
              properties:
                country:
                  type: string
                province:
                  type: string
                city:
                  type: string
                street:
                  type: string
                building_number:
                  type: string
                postal_code:
                  type: string
        required: true
  /user/{username}/address:
    get:
      tags:
        - user
      summary: Get user address
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "401":
          description: Unauthorized
        "404":
          description: Not found

  # ORDER ROUTES
  /order:
    post:
      tags:
        - order
      summary: Place an order for workshop services
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "400":
          description: Invalid Order
        "500":
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                workshopId:
                  type: integer
                serviceId:
                  type: integer
                onSite:
                  type: boolean
                  default: false
                pickUp:
                  type: boolean
                  default: false
                note:
                  type: string
                totalPrice:
                  type: integer
                placed:
                  type: boolean
                  default: true
                onProcess:
                  type: boolean
                  default: false
                readyToTake:
                  type: boolean
                  default: false
        required: true
  /order/{orderId}:
    get:
      tags:
        - order
      summary: Order details by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    put:
      tags:
        - order
      summary: (ONLY WORKSHOP CAN UPDATE ORDER STATUS)
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - onProcess
                - readyToTake
              properties:
                onProcess:
                  type: boolean
                readyToTake:
                  type: boolean
        required: true
    delete:
      tags:
        - order
      summary: Delete or cancel order by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found

  # RATING ROUTES
  /rating:
    post:
      tags:
        - rating
      summary: Operation to give user or workshop a rating
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                workshopId:
                  type: integer
                userId:
                  type: integer
                rating:
                  type: number
                  format: float
                description:
                  type: string
        required: true

  # WORKSHOP ROUTES
  /workshop:
    post:
      tags:
        - workshop
      summary: Operation of workshop login
      responses:
        "200":
          description: OK
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  token:
                    type: string
        "400":
          description: Invalid username/password supplied
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
        required: true
  /workshop/{username}/logout:
    get:
      tags:
        - workshop
      summary: Operation for getting workshop details by username
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /workshop/register:
    post:
      tags:
        - workshop
      summary: Operation of workshop register
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - name
                - email
                - password
                - phone
              properties:
                username:
                  type: string
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phone:
                  type: string
        required: true
  /workshop/{username}:
    get:
      tags:
        - workshop
      summary: Get workshop details by username
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /workshop/{username}/account:
    put:
      tags:
        - workshop
      summary: Operation for update workshop account
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
                - name
                - phone
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
                phone:
                  type: string
        required: true
  /workshop/{username}/address:
    put:
      tags:
        - workshop
      summary: Operation for update workshop address
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "500":
          description: Internal Serve Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - country
                - province
                - city
                - street
                - building_number
                - postal_code
              properties:
                country:
                  type: string
                province:
                  type: string
                city:
                  type: string
                street:
                  type: string
                building_number:
                  type: string
                postal_code:
                  type: string
        required: true
  /workshop/{username}/description:
    put:
      tags:
        - workshop
      summary: Operation for update workshop description
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "500":
          description: Internal Serve Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                workshopId:
                  type: integer
                description:
                  type: string
        required: true

  # SERVICES ROUTE FOR WORKSHOP
  /services/new:
    post:
      tags:
        - services
      summary: Operation for workshop to create their services
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                workshopId:
                  type: integer
                vehicle:
                  type: string
                vehicleType:
                  type: string
                services:
                  type: string
                price:
                  type: integer
        required: true
  /services/{servicesId}:
    put:
      tags:
        - services
      summary: Operation for update workshop services by ID
      parameters:
        - name: servicesId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                workshopId:
                  type: integer
                vehicle:
                  type: string
                vehicleType:
                  type: string
                services:
                  type: string
                price:
                  type: integer
        required: true
    get:
      tags:
        - services
      summary: Get services details by ID
      parameters:
        - name: servicesId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
        "400":
          description: Invalid ID supplied
        "404":
          description: Services not found
    delete:
      tags:
        - services
      summary: Delete or services by ID
      description: >-
        For valid response try integer IDs with positive integer value.\ \
        Negative or non-integer values will generate API errors
      parameters:
        - name: servicesId
          in: path
          description: ID of services that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Services not found
  /services:
    get:
      tags:
        - services
      summary: Show all services
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object
  /services/search:
    get:
      tags:
        - services
      summary: Search services
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  message:
                    type: string
                  data:
                    type: object

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/yossdev/gorepair-rest-api/1.0.0
  - url: "http://127.0.0.1:3000/api/v1" #for local server
