// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	entities "gorepair-rest-api/src/orders/entities"

	mock "github.com/stretchr/testify/mock"
)

// OrderMysqlRepositoryInterface is an autogenerated mock type for the OrderMysqlRepositoryInterface type
type OrderMysqlRepositoryInterface struct {
	mock.Mock
}

// GetUserOrderDetails provides a mock function with given fields: orderId, userId
func (_m *OrderMysqlRepositoryInterface) GetUserOrderDetails(orderId uint64, userId uint64) (*entities.Orders, error) {
	ret := _m.Called(orderId, userId)

	var r0 *entities.Orders
	if rf, ok := ret.Get(0).(func(uint64, uint64) *entities.Orders); ok {
		r0 = rf(orderId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Orders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(orderId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkshopOrderDetails provides a mock function with given fields: orderId, workshopId
func (_m *OrderMysqlRepositoryInterface) GetWorkshopOrderDetails(orderId uint64, workshopId uint64) (*entities.Orders, error) {
	ret := _m.Called(orderId, workshopId)

	var r0 *entities.Orders
	if rf, ok := ret.Get(0).(func(uint64, uint64) *entities.Orders); ok {
		r0 = rf(orderId, workshopId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Orders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64, uint64) error); ok {
		r1 = rf(orderId, workshopId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrderNew provides a mock function with given fields: payload, userId
func (_m *OrderMysqlRepositoryInterface) OrderNew(payload *entities.Orders, userId uint64) (*entities.Orders, error) {
	ret := _m.Called(payload, userId)

	var r0 *entities.Orders
	if rf, ok := ret.Get(0).(func(*entities.Orders, uint64) *entities.Orders); ok {
		r0 = rf(payload, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Orders)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entities.Orders, uint64) error); ok {
		r1 = rf(payload, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserCancelOrder provides a mock function with given fields: orderId, userId, username
func (_m *OrderMysqlRepositoryInterface) UserCancelOrder(orderId uint64, userId uint64, username string) error {
	ret := _m.Called(orderId, userId, username)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, uint64, string) error); ok {
		r0 = rf(orderId, userId, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
